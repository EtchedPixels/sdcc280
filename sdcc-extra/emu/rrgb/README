RRGB - Rough and Ready Game Boy Emulator
----------------------------------------

rrgb (c) 1998 Michael Hope
Z80 emulation from `xz80', copyright (C) 1994 Ian Collier.
Found in z81 (C) 1995-1997 Russell Marks.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

Roadmap
-------

The COPYING file contains a copy of the GPL described above.

ChangeLog describes differences between all versions.


Description
-----------

RRGB is a processor only Nintendo Game Boy emulator, desgined primarialy
for debugging work.  It emulates a system with the Gameboys Z80-like 
processor connected to 64K of RAM with few interrupts or display.  

The command line options are can be found using rrgb -h

The RST instructions have been modified to print information to the console,
hopefully helping the debugging process.  They are:

	RST 00	- End program
	RST 08	- Print the 00 terminated string following the RST
	RST 10	- Print the character in A
	RST 18	- Begin timing
	RST 20  - Print the number of T cycles elapsed since the last RST 18
	RST 28	- Print the 32 bit floating point number in HLDE
	
In version 0.21 banked memory support was added.  Its main purpose is to
support disk images for 'os'.  One new RST was added:
	RST 30  - Commit previous bank and load the bank HL into segment A

A bank is 8k long.  The 64k memory space is divided into eight segments
of 8k - so for example bank 4 begins at 0x8000 and goes to 0x9FFF.  The
optional second arguments specifies the disk image name.  Note that under
Linux you can use /dev/fd0 to access the actual floppy drive and if your
really keen /dev/hda1 to access the real harddrive :)

** WARNING Will Robinson! ** From version 0.32 write access is enabled by
default.  Doing a RST 30 will *commit* the last bank used before loading 
the current one.

Version 0.35 added communications support.  Given the '-t' option, rrgb will 
open port 6808 on the localhost and send/recieve binary data through it.
To read data, do a
	ld	a,#0
	rst	0x38
To write, load the data into L and do a
	ld	l,#data
	ld	a,#1
	rst	0x38
To check if data is available, use
	ld	a,#2
	rst	0x38
A contains the return value which is non-zero if data is available.
Please note that the support is quite suspect in the way it closes the socket
(I'm new to this stuff) and often fails to close it properly, requiring
you to wait until the socket closes automatically.  This code is probably not
portable to DOS.

Also added was a simple 100Hz (actaully 40000 tstate) timer interrupt that
vectors to 0050.

Version 0.30 and above include a simple debugger/disassebmler.  Use ? for
help.  rrgb supports the map files generated by GBDK 2.0b13 or above to
allow simple symbolic debugging.
Note that you can reference by label eg
> b _main
will set a breakpoint at the address of main().

As Russel Marks said:
I give Ian the main author credit for rrgb, as the Z80 emulation is
much harder to do than emulating the Gameboys hardware and patching the
ROM for save/load etc. However, any correspondence regarding RRGB
should be to me, as Ian hasn't had anything else to do with it and,
being more of a speccy fan (I think), may not appreciate being hassled
by those of the Gameboy persuasion. :-)

Please not that as at version 0.1 not all GB-specific instructions are
implemented (due to lazyness) - especially the LD A,($FF00+n) type and RETI.
These will be added in at a later date.  
Note that the flag register is in the Z80 format, not the Gameboy format.

-- Michael Hope
   mlh47@student.canterbury.ac.nz
   michaelh@earthling.net
   www.pcmedia.co.nz/~michaelh/

   98 Leinster Rd
   Christchurch
   New Zealand
